{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/lib/scraper.ts"],"sourcesContent":["// src/lib/scraper.ts\nimport axios from \"axios\";\nimport * as cheerio from \"cheerio\";\n\nexport async function scrapeTextFromURL(url: string): Promise<string> {\n  // Pretend to be a real browser\n  const response = await axios.get(url, {\n    headers: {\n      // Modern browser UA string\n      \"User-Agent\":\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \" +\n        \"AppleWebKit/537.36 (KHTML, like Gecko) \" +\n        \"Chrome/115.0.0.0 Safari/537.36\",\n      // Accept HTML only\n      Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n      // Some sites check Referer\n      Referer: url,\n    },\n    // Make sure we don’t reject non-2xx status codes immediately\n    validateStatus: (status) => status < 500,\n  });\n\n  if (response.status === 403) {\n    throw new Error(\"Medium is blocking our request (got 403).\");\n  }\n  if (response.status !== 200) {\n    throw new Error(`Unexpected status ${response.status}`);\n  }\n\n  const $ = cheerio.load(response.data);\n\n  // Pull text from <article> and <p>\n  let text = \"\";\n  $(\"article, p\").each((_, el) => {\n    text += $(el).text().trim() + \" \";\n  });\n\n  return text.trim();\n}\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;AACrB;AACA;AAAA;;;AAEO,eAAe,kBAAkB,GAAW;IACjD,+BAA+B;IAC/B,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;QACpC,SAAS;YACP,2BAA2B;YAC3B,cACE,+CACA,4CACA;YACF,mBAAmB;YACnB,QAAQ;YACR,2BAA2B;YAC3B,SAAS;QACX;QACA,6DAA6D;QAC7D,gBAAgB,CAAC,SAAW,SAAS;IACvC;IAEA,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,EAAE;IACxD;IAEA,MAAM,IAAI,CAAA,GAAA,yJAAA,CAAA,OAAY,AAAD,EAAE,SAAS,IAAI;IAEpC,mCAAmC;IACnC,IAAI,OAAO;IACX,EAAE,cAAc,IAAI,CAAC,CAAC,GAAG;QACvB,QAAQ,EAAE,IAAI,IAAI,GAAG,IAAI,KAAK;IAChC;IAEA,OAAO,KAAK,IAAI;AAClB","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/lib/summariser.ts"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Text summarization utility that uses both extractive and AI-based methods\n */\nexport async function summarizeText(fullText: string, sentenceCount = 6): Promise<{summary: string, title: string}> {\n  try {\n    // Try AI-based summarization first\n    const { summary: aiSummary, title } = await generateAISummary(fullText, sentenceCount);\n    return { summary: aiSummary, title };\n  } catch (error) {\n    console.error(\"AI summarization failed, falling back to extractive method:\", error);\n    // Fallback to extractive summarization if AI fails\n    const extractiveSummary = extractiveSummarize(fullText, sentenceCount);\n    const title = generateExtractiveTitle(fullText);\n    return { summary: extractiveSummary, title };\n  }\n}\n\n/**\n * Calls the Gemini API to generate an AI-powered summary and title\n */\nasync function generateAISummary(text: string, sentenceCount: number): Promise<{summary: string, title: string}> {\n  const apiKey = process.env.GEMINI_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error(\"GEMINI_API_KEY is not configured in environment variables\");\n  }\n\n  // Try with a more stable model version\n  const url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n  \n  try {\n    // Add timeout and retry logic\n    const response = await axios.post(\n      `${url}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            parts: [\n              {\n                text: `For the following text, provide: \n                1. A concise title (max 10 words)\n                2. A summary in ${sentenceCount} sentences, keeping the most important information\n                \n                Format your response as:\n                TITLE: [your title here]\n                SUMMARY: [your summary here]\n                \n                Text to summarize:\n                ${text}`\n              }\n            ]\n          }\n        ],\n        generationConfig: {\n          temperature: 0.2,\n          maxOutputTokens: 800,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000 // 10 second timeout\n      }\n    );\n\n    // Extract the summary from the response\n    const generatedText = response.data.candidates[0]?.content?.parts[0]?.text;\n    \n    if (!generatedText) {\n      throw new Error(\"No summary was generated by the API\");\n    }\n    \n    // Parse title and summary from response\n    const titleMatch = generatedText.match(/TITLE:\\s*(.*?)(?:\\n|$)/i);\n    const summaryMatch = generatedText.match(/SUMMARY:\\s*([\\s\\S]*?)(?:\\n\\n|$)/i);\n    \n    const title = titleMatch?.[1]?.trim() || generateExtractiveTitle(text);\n    const summary = summaryMatch?.[1]?.trim() || generatedText.trim();\n    \n    return { summary, title };\n  } catch (error) {\n    console.error(\"Error calling Gemini API:\", error);\n    \n    // If we get a 503 error, wait and retry once with a different model\n    if (axios.isAxiosError(error) && error.response?.status === 503) {\n      try {\n        console.log(\"Retrying after 503 error...\");\n        // Wait 2 seconds before retry\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Try with a different model as fallback\n        const fallbackUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent\";\n        \n        const retryResponse = await axios.post(\n          `${fallbackUrl}?key=${apiKey}`,\n          {\n            contents: [\n              {\n                parts: [\n                  {\n                    text: `For the following text, provide: \n                    1. A concise title (max 10 words)\n                    2. A summary in ${sentenceCount} sentences, keeping the most important information\n                    \n                    Format your response as:\n                    TITLE: [your title here]\n                    SUMMARY: [your summary here]\n                    \n                    Text to summarize:\n                    ${text}`\n                  }\n                ]\n              }\n            ],\n            generationConfig: {\n              temperature: 0.2,\n              maxOutputTokens: 800,\n            }\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            timeout: 15000 // Longer timeout for retry\n          }\n        );\n        \n        const generatedText = retryResponse.data.candidates[0]?.content?.parts[0]?.text;\n        \n        if (!generatedText) {\n          throw new Error(\"No summary was generated by the API on retry\");\n        }\n        \n        // Parse title and summary from response\n        const titleMatch = generatedText.match(/TITLE:\\s*(.*?)(?:\\n|$)/i);\n        const summaryMatch = generatedText.match(/SUMMARY:\\s*([\\s\\S]*?)(?:\\n\\n|$)/i);\n        \n        const title = titleMatch?.[1]?.trim() || generateExtractiveTitle(text);\n        const summary = summaryMatch?.[1]?.trim() || generatedText.trim();\n        \n        return { summary, title };\n      } catch (retryError) {\n        console.error(\"Retry also failed:\", retryError);\n        throw retryError; // Propagate the error to trigger the fallback\n      }\n    }\n    \n    throw error;\n  }\n}\n\n/**\n * Extractive summarization algorithm that selects important sentences\n * based on length, position, and keyword frequency.\n */\nfunction extractiveSummarize(fullText: string, sentenceCount = 6): string {\n  // Clean and split the text into sentences\n  const sentences = fullText\n    .replace(/\\n/g, \" \")\n    .split(/(?<=[.?!])\\s+/)\n    .filter((s) => s.length > 20);\n  \n  if (sentences.length <= sentenceCount) {\n    return sentences.join(\" \");\n  }\n\n  // Calculate sentence scores based on position and length\n  const scores = sentences.map((sentence, index) => {\n    // Position score - earlier sentences are often more important\n    const positionScore = 1 - (index / sentences.length);\n    \n    // Length score - favor medium-length sentences\n    const lengthScore = Math.min(sentence.length / 100, 1);\n    \n    // Word count score - sentences with more words often contain more information\n    const wordCount = sentence.split(/\\s+/).length;\n    const wordCountScore = Math.min(wordCount / 20, 1);\n    \n    // Combined score\n    return {\n      index,\n      sentence,\n      score: (positionScore * 0.6) + (lengthScore * 0.2) + (wordCountScore * 0.2)\n    };\n  });\n  \n  // Sort by score and take top sentences\n  const topSentences = scores\n    .sort((a, b) => b.score - a.score)\n    .slice(0, sentenceCount)\n    .sort((a, b) => a.index - b.index) // Restore original order\n    .map(item => item.sentence);\n  \n  return topSentences.join(\" \");\n}\n\n/**\n * Generates a simple title based on the first sentence or key phrases\n */\nfunction generateExtractiveTitle(text: string): string {\n  // Get the first sentence\n  const firstSentence = text.split(/[.!?]/, 1)[0].trim();\n  \n  // If it's short enough, use it as the title\n  if (firstSentence.length <= 60) {\n    return firstSentence;\n  }\n  \n  // Otherwise, extract key words from the beginning\n  const words = firstSentence.split(/\\s+/).slice(0, 8);\n  return words.join(' ') + '...';\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/lib/translator.ts"],"sourcesContent":["import axios from 'axios';\n\nconst dictionary: Record<string, string> = {\n  \"blog\": \"بلاگ\",\n  \"summary\": \"خلاصہ\",\n  \"text\": \"متن\",\n  \"article\": \"مضمون\",\n  \"sentence\": \"جملہ\",\n  \"information\": \"معلومات\",\n  \"title\": \"عنوان\",\n  // Add more as needed\n};\n\n/**\n * Translates text to Urdu using Gemini API\n * Falls back to dictionary-based translation if AI translation fails\n */\nexport async function translateToUrdu(text: string): Promise<string> {\n  try {\n    // Try AI-based translation first\n    return await generateAITranslation(text);\n  } catch (error) {\n    console.error(\"AI translation failed, falling back to dictionary method:\", error);\n    // Fallback to dictionary-based translation\n    return dictionaryTranslate(text);\n  }\n}\n\n/**\n * Translates title to Urdu using Gemini API\n */\nexport async function translateTitleToUrdu(title: string): Promise<string> {\n  try {\n    // Try AI-based translation first\n    return await generateAITranslation(title);\n  } catch (error) {\n    console.error(\"AI title translation failed, falling back to dictionary method:\", error);\n    // Fallback to dictionary-based translation\n    return dictionaryTranslate(title);\n  }\n}\n\n/**\n * Uses Gemini API to translate text to Urdu\n */\nasync function generateAITranslation(text: string): Promise<string> {\n  const apiKey = process.env.GEMINI_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error(\"GEMINI_API_KEY is not configured in environment variables\");\n  }\n\n  const url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n  \n  try {\n    const response = await axios.post(\n      `${url}?key=${apiKey}`,\n      {\n        contents: [\n          {\n            parts: [\n              {\n                text: `Translate the following English text to Urdu. Provide ONLY the Urdu translation without any explanations or notes:\n\n${text}`\n              }\n            ]\n          }\n        ],\n        generationConfig: {\n          temperature: 0.2,\n          maxOutputTokens: 1000,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000 // 10 second timeout\n      }\n    );\n\n    // Extract the translation from the response\n    const translatedText = response.data.candidates[0]?.content?.parts[0]?.text;\n    \n    if (!translatedText) {\n      throw new Error(\"No translation was generated by the API\");\n    }\n    \n    return translatedText.trim();\n  } catch (error) {\n    console.error(\"Error calling Gemini API for translation:\", error);\n    \n    // If we get a 503 error, wait and retry once with a different model\n    if (axios.isAxiosError(error) && error.response?.status === 503) {\n      try {\n        console.log(\"Retrying translation after 503 error...\");\n        // Wait 2 seconds before retry\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Try with a different model as fallback\n        const fallbackUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent\";\n        \n        const retryResponse = await axios.post(\n          `${fallbackUrl}?key=${apiKey}`,\n          {\n            contents: [\n              {\n                parts: [\n                  {\n                    text: `Translate the following English text to Urdu. Provide ONLY the Urdu translation without any explanations or notes:\n\n${text}`\n                  }\n                ]\n              }\n            ],\n            generationConfig: {\n              temperature: 0.2,\n              maxOutputTokens: 1000,\n            }\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            timeout: 15000 // Longer timeout for retry\n          }\n        );\n        \n        const translatedText = retryResponse.data.candidates[0]?.content?.parts[0]?.text;\n        \n        if (!translatedText) {\n          throw new Error(\"No translation was generated by the API on retry\");\n        }\n        \n        return translatedText.trim();\n      } catch (retryError) {\n        console.error(\"Translation retry also failed:\", retryError);\n        throw retryError;\n      }\n    }\n    \n    throw error;\n  }\n}\n\n/**\n * Dictionary-based translation (fallback method)\n */\nfunction dictionaryTranslate(text: string): string {\n  return text\n    .split(/\\b/)\n    .map((word) => dictionary[word.toLowerCase()] || word)\n    .join(\"\");\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAqC;IACzC,QAAQ;IACR,WAAW;IACX,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,eAAe;IACf,SAAS;AAEX;AAMO,eAAe,gBAAgB,IAAY;IAChD,IAAI;QACF,iCAAiC;QACjC,OAAO,MAAM,sBAAsB;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6DAA6D;QAC3E,2CAA2C;QAC3C,OAAO,oBAAoB;IAC7B;AACF;AAKO,eAAe,qBAAqB,KAAa;IACtD,IAAI;QACF,iCAAiC;QACjC,OAAO,MAAM,sBAAsB;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mEAAmE;QACjF,2CAA2C;QAC3C,OAAO,oBAAoB;IAC7B;AACF;AAEA;;CAEC,GACD,eAAe,sBAAsB,IAAY;IAC/C,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IAEzC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,MAAM;IAEZ,IAAI;QACF,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,GAAG,IAAI,KAAK,EAAE,QAAQ,EACtB;YACE,UAAU;gBACR;oBACE,OAAO;wBACL;4BACE,MAAM,CAAC;;AAEvB,EAAE,MAAM;wBACM;qBACD;gBACH;aACD;YACD,kBAAkB;gBAChB,aAAa;gBACb,iBAAiB;YACnB;QACF,GACA;YACE,SAAS;gBACP,gBAAgB;YAClB;YACA,SAAS,MAAM,oBAAoB;QACrC;QAGF,4CAA4C;QAC5C,MAAM,iBAAiB,SAAS,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE;QAEvE,IAAI,CAAC,gBAAgB;YACnB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,eAAe,IAAI;IAC5B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAE3D,oEAAoE;QACpE,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,UAAU,MAAM,QAAQ,EAAE,WAAW,KAAK;YAC/D,IAAI;gBACF,QAAQ,GAAG,CAAC;gBACZ,8BAA8B;gBAC9B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;gBAEjD,yCAAyC;gBACzC,MAAM,cAAc;gBAEpB,MAAM,gBAAgB,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CACpC,GAAG,YAAY,KAAK,EAAE,QAAQ,EAC9B;oBACE,UAAU;wBACR;4BACE,OAAO;gCACL;oCACE,MAAM,CAAC;;AAE3B,EAAE,MAAM;gCACU;6BACD;wBACH;qBACD;oBACD,kBAAkB;wBAChB,aAAa;wBACb,iBAAiB;oBACnB;gBACF,GACA;oBACE,SAAS;wBACP,gBAAgB;oBAClB;oBACA,SAAS,MAAM,2BAA2B;gBAC5C;gBAGF,MAAM,iBAAiB,cAAc,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE;gBAE5E,IAAI,CAAC,gBAAgB;oBACnB,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO,eAAe,IAAI;YAC5B,EAAE,OAAO,YAAY;gBACnB,QAAQ,KAAK,CAAC,kCAAkC;gBAChD,MAAM;YACR;QACF;QAEA,MAAM;IACR;AACF;AAEA;;CAEC,GACD,SAAS,oBAAoB,IAAY;IACvC,OAAO,KACJ,KAAK,CAAC,MACN,GAAG,CAAC,CAAC,OAAS,UAAU,CAAC,KAAK,WAAW,GAAG,IAAI,MAChD,IAAI,CAAC;AACV","debugId":null}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/lib/db/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI!;\nlet client: MongoClient | null = null;\nconst dbName = \"blog_summariser\";\n\nexport async function saveToMongo(data: { \n  url: string; \n  fullText: string; \n  title: string;\n  urduTitle: string;\n}) {\n  try {\n    // Create a new client if one doesn't exist\n    if (!client) {\n      client = new MongoClient(uri);\n    }\n    \n    // Connect to the client\n    await client.connect();\n    \n    const db = client.db(dbName);\n    const collection = db.collection(\"full_texts\");\n\n    // Insert the document\n    const result = await collection.insertOne({\n      url: data.url,\n      fullText: data.fullText,\n      title: data.title,\n      urduTitle: data.urduTitle,\n      createdAt: new Date(),\n    });\n    \n    console.log(\"MongoDB save successful, document ID:\", result.insertedId);\n    return { success: true, id: result.insertedId };\n  } catch (err) {\n    console.error(\"MongoDB save error:\", err);\n    throw err;\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,IAAI,SAA6B;AACjC,MAAM,SAAS;AAER,eAAe,YAAY,IAKjC;IACC,IAAI;QACF,2CAA2C;QAC3C,IAAI,CAAC,QAAQ;YACX,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC3B;QAEA,wBAAwB;QACxB,MAAM,OAAO,OAAO;QAEpB,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,aAAa,GAAG,UAAU,CAAC;QAEjC,sBAAsB;QACtB,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;YACxC,KAAK,KAAK,GAAG;YACb,UAAU,KAAK,QAAQ;YACvB,OAAO,KAAK,KAAK;YACjB,WAAW,KAAK,SAAS;YACzB,WAAW,IAAI;QACjB;QAEA,QAAQ,GAAG,CAAC,yCAAyC,OAAO,UAAU;QACtE,OAAO;YAAE,SAAS;YAAM,IAAI,OAAO,UAAU;QAAC;IAChD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 772, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/lib/db/supabase.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function saveToSupabase(data: {\n  url: string;\n  summary: string;\n  translated: string;\n  title: string;\n  urduTitle: string;\n}) {\n  try {\n    // Enable RLS bypass for this operation\n    const { error } = await supabase\n      .from(\"summaries\")\n      .insert([\n        {\n          url: data.url,\n          summary: data.summary,\n          translated: data.translated,\n          title: data.title,\n          urdu_title: data.urduTitle,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select();\n\n    if (error) {\n      console.error(\"Supabase error details:\", error);\n      throw new Error(\"Failed to save summary to Supabase: \" + error.message);\n    }\n    \n    return { success: true };\n  } catch (err) {\n    console.error(\"Supabase save error:\", err);\n    throw err;\n  }\n}\n\nexport async function findExistingSummary(url: string) {\n  try {\n    const { data, error } = await supabase\n      .from(\"summaries\")\n      .select(\"summary, translated, title, urdu_title\")\n      .eq(\"url\", url)\n      .order(\"created_at\", { ascending: false })\n      .limit(1)\n      .single();\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" error\n      console.error(\"Supabase query error:\", error);\n      throw new Error(\"Failed to query Supabase: \" + error.message);\n    }\n    \n    return data || null;\n  } catch (err) {\n    console.error(\"Supabase query error:\", err);\n    return null;\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,qEAAqE;AACrE,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAC1B,QAAQ,GAAG,CAAC,wBAAwB,EACpC,QAAQ,GAAG,CAAC,6BAA6B;AAGpC,eAAe,eAAe,IAMpC;IACC,IAAI;QACF,uCAAuC;QACvC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,aACL,MAAM,CAAC;YACN;gBACE,KAAK,KAAK,GAAG;gBACb,SAAS,KAAK,OAAO;gBACrB,YAAY,KAAK,UAAU;gBAC3B,OAAO,KAAK,KAAK;gBACjB,YAAY,KAAK,SAAS;gBAC1B,YAAY,IAAI,OAAO,WAAW;YACpC;SACD,EACA,MAAM;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM,IAAI,MAAM,yCAAyC,MAAM,OAAO;QACxE;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM;IACR;AACF;AAEO,eAAe,oBAAoB,GAAW;IACnD,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,aACL,MAAM,CAAC,0CACP,EAAE,CAAC,OAAO,KACV,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM,GACvC,KAAK,CAAC,GACN,MAAM;QAET,IAAI,SAAS,MAAM,IAAI,KAAK,YAAY;YACtC,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM,IAAI,MAAM,+BAA+B,MAAM,OAAO;QAC9D;QAEA,OAAO,QAAQ;IACjB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 826, "column": 0}, "map": {"version":3,"sources":["file:///Users/Ahmad/Documents/Nexium-Internship/Nexium_Ahmad_Assign2/src/app/api/summarize/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { scrapeTextFromURL } from \"@/lib/scraper\";\nimport { summarizeText } from \"@/lib/summariser\";\nimport { translateToUrdu, translateTitleToUrdu } from \"@/lib/translator\";\nimport { saveToMongo } from \"@/lib/db/mongo\";\nimport { saveToSupabase, findExistingSummary } from \"@/lib/db/supabase\";\n\nexport async function POST(req: Request) {\n  try {\n    const { url } = await req.json();\n\n    if (!url) return NextResponse.json({ error: \"Missing URL\" }, { status: 400 });\n\n    // Check if URL already exists in Supabase\n    const existingSummary = await findExistingSummary(url);\n    \n    // If we found an existing summary, return it without reprocessing\n    if (existingSummary) {\n      console.log(\"Found existing summary for URL:\", url);\n      return NextResponse.json({\n        summary: existingSummary.summary,\n        translated: existingSummary.translated,\n        title: existingSummary.title,\n        urduTitle: existingSummary.urdu_title,\n        dbStatus: {\n          supabase: { success: true, cached: true },\n          mongodb: { success: true, cached: true }\n        }\n      });\n    }\n\n    // URL not found in database, proceed with scraping and processing\n    console.log(\"Processing new URL:\", url);\n    const fullText = await scrapeTextFromURL(url);\n    const { summary, title } = await summarizeText(fullText);\n    \n    // Get Urdu translation using AI\n    const translated = await translateToUrdu(summary);\n    const urduTitle = await translateTitleToUrdu(title);\n\n    // Database status tracking\n    const dbStatus = {\n      supabase: { success: false, error: null as string | null },\n      mongodb: { success: false, error: null as string | null }\n    };\n\n    // Try Supabase\n    try {\n      await saveToSupabase({ url, summary, translated, title, urduTitle });\n      dbStatus.supabase.success = true;\n    } catch (error: unknown) {\n      dbStatus.supabase.error = error instanceof Error ? error.message : String(error);\n      console.error(\"Supabase error:\", dbStatus.supabase.error);\n    }\n\n    // Try MongoDB\n    try {\n      await saveToMongo({ url, fullText, title, urduTitle });\n      dbStatus.mongodb.success = true;\n    } catch (error: unknown) {\n      dbStatus.mongodb.error = error instanceof Error ? error.message : String(error);\n      console.error(\"MongoDB error:\", dbStatus.mongodb.error);\n    }\n\n    // Return the summary along with database status\n    return NextResponse.json({\n      summary,\n      translated,\n      title,\n      urduTitle,\n      dbStatus\n    });\n  } catch (err: unknown) {\n    console.error(\"API error:\", err instanceof Error ? err.message : String(err));\n    return NextResponse.json(\n      { error: err instanceof Error ? err.message : 'An unknown error occurred' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI;QAE9B,IAAI,CAAC,KAAK,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAc,GAAG;YAAE,QAAQ;QAAI;QAE3E,0CAA0C;QAC1C,MAAM,kBAAkB,MAAM,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE;QAElD,kEAAkE;QAClE,IAAI,iBAAiB;YACnB,QAAQ,GAAG,CAAC,mCAAmC;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,gBAAgB,OAAO;gBAChC,YAAY,gBAAgB,UAAU;gBACtC,OAAO,gBAAgB,KAAK;gBAC5B,WAAW,gBAAgB,UAAU;gBACrC,UAAU;oBACR,UAAU;wBAAE,SAAS;wBAAM,QAAQ;oBAAK;oBACxC,SAAS;wBAAE,SAAS;wBAAM,QAAQ;oBAAK;gBACzC;YACF;QACF;QAEA,kEAAkE;QAClE,QAAQ,GAAG,CAAC,uBAAuB;QACnC,MAAM,WAAW,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD,EAAE;QACzC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,CAAA,GAAA,0HAAA,CAAA,gBAAa,AAAD,EAAE;QAE/C,gCAAgC;QAChC,MAAM,aAAa,MAAM,CAAA,GAAA,0HAAA,CAAA,kBAAe,AAAD,EAAE;QACzC,MAAM,YAAY,MAAM,CAAA,GAAA,0HAAA,CAAA,uBAAoB,AAAD,EAAE;QAE7C,2BAA2B;QAC3B,MAAM,WAAW;YACf,UAAU;gBAAE,SAAS;gBAAO,OAAO;YAAsB;YACzD,SAAS;gBAAE,SAAS;gBAAO,OAAO;YAAsB;QAC1D;QAEA,eAAe;QACf,IAAI;YACF,MAAM,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE;gBAAK;gBAAS;gBAAY;gBAAO;YAAU;YAClE,SAAS,QAAQ,CAAC,OAAO,GAAG;QAC9B,EAAE,OAAO,OAAgB;YACvB,SAAS,QAAQ,CAAC,KAAK,GAAG,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YAC1E,QAAQ,KAAK,CAAC,mBAAmB,SAAS,QAAQ,CAAC,KAAK;QAC1D;QAEA,cAAc;QACd,IAAI;YACF,MAAM,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD,EAAE;gBAAE;gBAAK;gBAAU;gBAAO;YAAU;YACpD,SAAS,OAAO,CAAC,OAAO,GAAG;QAC7B,EAAE,OAAO,OAAgB;YACvB,SAAS,OAAO,CAAC,KAAK,GAAG,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YACzE,QAAQ,KAAK,CAAC,kBAAkB,SAAS,OAAO,CAAC,KAAK;QACxD;QAEA,gDAAgD;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,KAAc;QACrB,QAAQ,KAAK,CAAC,cAAc,eAAe,QAAQ,IAAI,OAAO,GAAG,OAAO;QACxE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,eAAe,QAAQ,IAAI,OAAO,GAAG;QAA4B,GAC1E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}